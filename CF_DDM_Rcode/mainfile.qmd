---
title: "main_file"
author: "Liu"
format: html
editor: visual
---

# 毕业论文结果

数据分析系统环境：

```{r}
library(plyr)
library(data.table)
library(tidyverse)
library(bruceR)

devtools::session_info()
```

```{r include=FALSE}
#| echo: false
# 加载原始数据和初步分析用表
source("Num2word.R")
source("AFF.R")
```

## 1 离群值检测

```{r include=FALSE}
#| echo: false
# 离群值检测
filled_outers1 <- lapply(outers1, function(df) {
  n_missing_rows <- 10 - nrow(df)
  if (n_missing_rows > 0) {
    missing_rows <- data.frame(SubIndex = rep(0, n_missing_rows))
    df <- rbind(df, missing_rows)
  }
  return(df)
})

filled_outers1 <- bind_cols(filled_outers1)
colnames(filled_outers1) <- names(outers1)

filled_outers2 <- lapply(outers2, function(df) {
  n_missing_rows <- 10 - nrow(df)
  if (n_missing_rows > 0) {
    missing_rows <- data.frame(SubIndex = rep(0, n_missing_rows))
    df <- rbind(df, missing_rows)
  }
  return(df)
})

filled_outers2 <- bind_cols(filled_outers2)
colnames(filled_outers2) <- names(outers2)

outers <- cbind(filled_outers1, filled_outers2)
```

```{r warning=FALSE}
#| echo: false
sums <- colSums(outers)
non_zero_cols <- names(outers)[sums != 0]
outers[, non_zero_cols, drop = FALSE]
OUTERS <- c()
```

```{r include=FALSE}
# 加载预分析用数据
AFF_long_Sim <- filter(AFF_long, !(SubIndex %in% OUTERS))

SimpleTest.frame <- merge(CF_wide, AFF_wide, by = 'SubIndex') %>%
  filter(!(SubIndex %in% OUTERS)) %>% 
  select(-c(RT.Trans, RT.Repeat, ACC.Trans, ACC.Repeat))
```

## 2 认知灵活性与冲突积极性、非冲突情绪的相关

### 1.1 描述统计

图1：冲突积极性直方图

```{r}
hist(SimpleTest.frame$Conflict_pos)
```

图2：非冲突情绪直方图

```{r}
hist(SimpleTest.frame$Conflict_neg)
```

图3：认知灵活性直方图

```{r}
hist(SimpleTest.frame$switch_cost)
```

### 1.2 转换代价与冲突积极性的相关

```{r}
plot(SimpleTest.frame$switch_cost, SimpleTest.frame$Conflict_pos)
cor.test(SimpleTest.frame$switch_cost, SimpleTest.frame$Conflict_pos)
```

### 1.3 转换代价与一致条件情绪效应的相关

```{r}
plot(SimpleTest.frame$switch_cost, SimpleTest.frame$Conflict_neg)
cor.test(SimpleTest.frame$switch_cost, SimpleTest.frame$Conflict_neg)
```

## 3 假设1：转换代价越高，情绪词判断越慢

```{r include=FALSE}
Hypo_1 <- AFF_long_Sim %>% 
  filter(respAffWord.corr == 1 & respFlanker.corr == 1) %>% 
  group_by(SubIndex) %>% 
  summarise(meanRT.G = mean(respAffWord.rt), .groups = 'drop') %>% 
  cbind(SimpleTest.frame$switch_cost) %>% 
  mutate(RT.G = meanRT.G - SimpleTest.frame$RT.prime_Co)

Hypo_1 <- AFF_long_Sim %>% 
  filter(respAffWord.corr == 1 & respFlanker.corr == 1) %>% 
  group_by(SubIndex, AffValue) %>% 
  summarise(meanRT = mean(respAffWord.rt), .groups = 'drop') %>% 
  pivot_wider(names_from = AffValue, values_from = meanRT) %>% 
  cbind(SimpleTest.frame$switch_cost) %>% 
  mutate(RT.pos = pos - SimpleTest.frame$RT.prime_Co, RT.neg = neg - SimpleTest.frame$RT.prime_Co) %>% 
  merge(Hypo_1, by = c('SubIndex', 'SimpleTest.frame$switch_cost'), all.x = TRUE)
```

### 3.1 转换代价与整体情绪词反应时的相关

```{r}
cor.test(Hypo_1$`SimpleTest.frame$switch_cost`, Hypo_1$RT.G)
```

### 3.2 转换代价与积极词反应时的相关

```{r}
cor.test(Hypo_1$`SimpleTest.frame$switch_cost`, Hypo_1$RT.pos)
```

### 3.3 转换代价与消极词反应时的相关

```{r}
cor.test(Hypo_1$`SimpleTest.frame$switch_cost`, Hypo_1$RT.neg)
```

## 4 情绪反转效应检验

```{r}
library(bruceR)
# 分析基础数据
AFF_long_Sim %>% 
  filter(respAffWord.corr == 1 & respFlanker.corr == 1) %>% 
  group_by(SubIndex, congruency, AffValue) %>% 
  summarise(RT = mean(respAffWord.rt)) %>% 
  ggplot(aes(congruency, RT)) +
  geom_boxplot(aes(colour =  as.factor(AffValue)))

RESULT <- AFF_long_Sim %>% 
  filter(respAffWord.corr == 1 & respFlanker.corr == 1) %>%
  MANOVA(subID = 'SubIndex' ,within = c('congruency', 'AffValue'), dv = 'respAffWord.rt') %>% 
  EMMEANS("AffValue", by = "congruency")
```

### 4.1 方差分析

#### 描述统计

```{r}
AFF_merge <- AFF_long %>%
  group_by(SubIndex, congruency, AffValue) %>% 
  dplyr::summarise(rt = mean(respAffWord.rt, na.rm = TRUE), .groups = "drop")

AFF_summary <- AFF_long %>% 
  group_by(SubIndex, congruency, AffValue) %>% 
  dplyr::summarise(rt = mean(respAffWord.rt, na.rm = TRUE), .groups = "drop") %>% 
  summarySE(measurevar= 'rt', groupvars=c("congruency","AffValue"), na.rm = TRUE) %>% 
  mutate(rt = round(rt,4)) %>% 
  mutate(sd = round(sd,4)) %>% 
  mutate(se = round(se,4)) %>% 
  mutate(ci = round(ci,4))
AFF_summary
```

#### 两因素方差分析

```{r message=TRUE, warning=FALSE}
RESULT$anova_table
```

### 4.2 简单效应分析结果

```{r message=TRUE, warning=FALSE}
SimpleEffect <- EMMEANS(RESULT, "AffValue", by = "congruency")
```

### 4.3 图

```{r}
ggplot(AFF_merge, aes(x = congruency, y = rt, fill = AffValue)) +
  geom_split_violin(trim = FALSE, color = "white") +
  geom_point(data = AFF_summary, aes(x = congruency, y = rt, fill = AffValue),
             pch=19, position=position_dodge(0.35), size=1.5)+ #绘制均值为点图
  geom_errorbar(data = AFF_summary,
                aes(ymin = rt-ci, ymax=rt+ci), #误差条表示95%的置信区间
                width=0.1, #误差条末端短横线的宽度
                position=position_dodge(0.35),
                color="black",
                alpha = 0.7,
                size=0.5) +
  scale_fill_manual(values = c("#56B4E9", "#E69F00"))+ #设置填充的颜色
  theme_bw()+ #背景变为白色
  labs(x = "Congruency", y = "Reaction Time", title = "Plot of Reaction Time by Congruency and AffValue")
```

## 5 序列效应

### 5.1 block拆分并汇总

```{r}
#| echo: false
# 分block计算冲突积极性
df.block <- data.frame()
for (i in c(0:3)) {
  df.block <- rbind(df.block, split_block(i))
}
df.block
```

### 5.2 汇总block数据

```{r}
df.block %>% 
  group_by(SubIndex, block) %>% 
  dplyr::summarise(con_pos = mean(con_pos), ic_pos = mean(ic_pos)) %>% 
  MANOVA(subID = "SubIndex", within = "block", dv = "con_pos")
```

```{r}
df.block %>% 
  group_by(block) %>% 
  dplyr::summarise(con_pos = mean(con_pos), ic_pos = mean(ic_pos)) %>% 
  ggplot() +
  geom_line(aes(x = block, y = con_pos), color = "blue") +
  geom_line(aes(x = block, y = ic_pos), color = "red")
```

```{r}
df.block %>%
  filter(block == 1) %>% 
  group_by(SubIndex) %>% 
  dplyr::summarise(con_pos = mean(con_pos)) -> test
hist(test$con_pos)
```

## 待完成事项

1.  检验跨block效应并绘图(需要优化加工，加上散点、误差棒)、
2.  对block2的单被试数据进行检验，查找异常值(可能是因为block2的指导语原因)
3.  导出HDDM建模用数据（准入标准：prime正确、RT = m ± 1.96sd）
